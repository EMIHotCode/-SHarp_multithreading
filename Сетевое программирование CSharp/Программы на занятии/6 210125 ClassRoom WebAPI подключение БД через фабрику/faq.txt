
По работе с БД создадим библиотеку Class Library WebAPI_Demo.DB
Туда подключим:
EntityFrameworkCore.PostgreSQL для работы с БД 
EntityFrameworkCore.Tools - для выполнения миграции 

Создаем 
DataBaseContext.cs - определённое окружение доступных свойств и методов в конкретном 
    программном модуле, в конкретной строке.
DataBaseContextFactory.cs - создаем класс чтобы миграция нормально работала, чтобы 
    брала данные из конфигурационного файла json и нормально работала.
    Работает с using Microsoft.EntityFrameworkCore.Design; и ссылается на DataBaseContext IDesignTimeDbContextFactory<DataBaseContext>
    Чтобы работать с json подключаем библиотеку using Microsoft.Extensions.Configuration; 

Программа работает с БД webapi_phonebook  
Postgres умеет работать с ENUM Для этого в DataBaseContext прописываем 
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseNpgsql(_connectionString,
                o => o.MapEnum<PhoneType>(nameof(PhoneType)));  // вторым аргументом для работы с enum 
        }
        
Инициируем миграцию в коммандной строке по пути где находится БД D:\...\6 210125 ClassRoom WebAPI подключение БД через фабрику\WebAPI_Demo.DB
dotnet ef migrations add Init
Заполняем поля таблиц данными БД на основе миграции 
dotnet ef database update  - выдает ошибку но на самом деле все выполняется

Важно!!!! Присоединить Библиотеку работы с БД к проекту API  через WebAPI_Demo.API/Dependencies/Refrence/ Выбираем БД и жмем ADD

DataBaseContextFactory.cs создаем экземпляр класса для работы 
       // создадим метод из этого контекста который не будет требовать аргументы, а будет тянуть по умолчанию 
        private string[] _args => Array.Empty<string>(); // создали массив аргументов, сделали его пустым (тоесть из пустых строк)
        public DataBaseContext CreateDbContext() => CreateDbContext(_args); // создали метод класса без аргументов (смотри выше с аргументами)
        // чтобы не создавать какие то новые классы а использовать класс фабрики и из него берем метод без аргументов 
        // в этом случае будет работать через экземпляр класса (класс по умолчанию работает через интерфейс)



Ничего не работает ??? Разобраться
