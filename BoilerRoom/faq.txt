Создание сервера Server. В расшириных настройках WebApi выбрали UseMinimalApi.

Создали Слой Сервера BoilerRoom.WebAPI
    - appsettings.json  строки подключения как и в BoilerRoom.DAL\appsettings.json
    - автоматически подключается библиотека Microsoft.AspNetCore.OpenApi
    
Создали проект библиотка классов Library  BoilerRoom.Model
    В нем классы описывающие данных Data Transfer Object (DTO) — объект передачи данных

Создаем слой библиотка классов Library BoilerRoom.Dal  слой доступа к данным для работы с БД
    В нем работаем через EntityFramework создаем миграцию
    подключаем библиотеки
        - MongoDB.EntityFrameworkCore - для работы с БД
        - Microsoft.EntityFrameworkCore Version="9.0.1"
        - EntityFrameworkCore.Tools которая содержит Designer
        - Microsoft.Extensions.Configuration.Json
        - Правильное написание строк подключения для разных баз данных https://www.connectionstrings.com/
    class BoilerRoomContextFactory : IDesignTimeDbContextFactory<BoilerRoomContext>  // метод и класс который создают объект ToDoContext
    создем файл appsettings.json
    создаем миграцию для слоя BoilerRoom.DAL переходим в папку с файлом BoilerRoom.DAL.csproj
        - используем комманду dotnet ef migrations add InitialCreate
        - Миграция в C# — это функция в Entity Framework Core, которая позволяет последовательно применять изменения схемы к базе данных, чтобы синхронизировать её с моделью данных в приложении без потери существующих данных
        - после создания миграции нужно ее выполнить dotnet ef database update (ошибка )
    


приложение работает с Sqlite
подключен Microsoft.EntityFrameworkCore.Sqlite для работы с EntityFramework

-- один файл это одна база данных поэтому не создаем базу данных и схемы а сразу таблицы
-- sqlLite - база данных из одного файла заранее созданного желательно в корне проекта с расширением .db  .
-- Нет логина и пароля по умолчанию. Не надо запускать сервер и отключать его. 
-- файл  с  расширением .db нужно чтобы копировался туда где расположен .exe программы. Чтобы цепляться к БД из приложения 
-- нужно правой кнопкой мыши нажать и выбрать Properties \ Copy to output directory \ Copy if newer \ Ok

строка подключения optionsBuilder.UseSqlite("Data Source=helloapp.db");  https://metanit.com/sharp/efcore/1.2.php

Замена строки подключения Entity Framework на файл подключения Json используя расширение Microsoft.Extensions.Configuration.Json

public DbSet<employee> Employees { get; set; } // DbSet определяет сущность для которой будет создана таблица в бд


Реализовать API микросервис GetWeather !!!!! который с задержкой в 1 час получает даныне с сайта
- как хранить данные микросервиса 
- как забирать данные WPF приложением раз в час




iTextSharp       https://stackoverflow.com/questions/6363135/adding-new-pages-to-existing-pdf-using-itextsharp
PdfDocument pdfDoc = new PdfDocument(); // create document
PdfPage pdfPage = new PdfPage(); // create page 
pdfPage.Size = PageSize.Letter; // set page size
pdfDoc.Pages.Add(pdfPage); // add page to document











При написании погоды использовать обновление 
public MainWindow()
        {
            InitializeComponent();

            //Создаем таймер с интервалом в 3 секунды
            dispatcherTimer = new DispatcherTimer();
            dispatcherTimer.Tick += new EventHandler(dispatcherTimer_Tick);
            dispatcherTimer.Interval = new TimeSpan(0, 0, 3);
        }

        private void dispatcherTimer_Tick(object sender, EventArgs e)
        {
            //Вещи, которые происходят через 1 интервал времени по таймеру
            //MessageBox.Show("Show some data"); - тоже можно добавить по истечении прошедшего времени
            LabelPassCopyToClipboard.Visibility = System.Windows.Visibility.Collapsed;

            //Отключение таймера
            dispatcherTimer.IsEnabled = false;
        }

        private void btnGenPass_Click(object sender, RoutedEventArgs e)
        {
            //События, которые происходят до запуска таймера
            LabelPassCopyToClipboard.Visibility = System.Windows.Visibility.Visible;
            //Запуск таймера
            dispatcherTimer.Start();

            EnableDisableGeneratePasswordButton();
            if (btnGenPass.IsEnabled)
            {
                if (int.TryParse(LabelPasswordLengthValue.Content.ToString(), out int passLength))
                {
                    txtBoxPassword.Text = GetGeneratedPassword(passLength);
                    // сохранение в буфер обмена сгенерированного пароля
                    Clipboard.SetData(DataFormats.Text, txtBoxPassword.Text);
                }
                else
                    MessageBox.Show($"Длинна пароля неправильно определена.");
            }
            else
                MessageBox.Show($"Сначала параметры для генерации пароля ");


        }